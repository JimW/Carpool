// Place all the behaviors and hooks related to the matching controller here.
// All this logic will automatically be available in application.js.
full_calendar_options = <%= FullcalendarEngine::Configuration.to_json.html_safe %>
app_path              = "<%= FullcalendarEngine::Configuration["mount_path"] %>"
admin_routes_path     = "<%= Rails.application.routes.url_helpers.admin_routes_path %>"
routes_path     = "<%= Rails.application.routes.url_helpers.routes_path %>"

var working_week = moment('<%= @working_week%>', "YYYY MM DD");
var lastView;
var last_calendar_type;
var last_working_date;



$.extend(full_calendar_options, {
  loading: function(bool){
    if (bool)
      $('#loading').show();
    else
      $('#loading').hide();
  },

  viewRender: function( view, element ) {
    // http://stackoverflow.com/questions/5617194/callback-for-month-week-day-title-bar-button-clicks
    // if (lastView === undefined) { lastView = 'firstRun';  }

    // if (lastView != 'firstRun') {
      if(view.name === "agendaWeek") { // || view.name === "agendaDay"){
        working_week = $('.calendar').fullCalendar('getView').start
        // Cookies.set('working_week', working_week);

      };
    // }
    // lastView = view.name;
    // Cookies.set('last_calendar_type', view.name);
  },

  // viewRender: function( view, element ) {
  //
  //   // if(view.name === "agendaWeek" || view.name === "agendaDay"){
  //   //   alert(<%= @working_date%>);
  //   // };
  //
  //   // element.bind('mousedown', function (e) {
  //   //     if (e.which == 3) {
  //   //         alert(event.category);
  //   //     }
  //   // });
  //
  //   // // view is the View Object for the new view.
  //   // // element is a jQuery element for the container of the new view.
  //   // var viewName = view.name;
  //   // if(viewName === "agendaWeek" || viewName === "agendaDay"){
  //   //   alert("hi");
  //   //     // var currentHour = $.fullCalendar.formatDate(new Date(), "hTT").toLowerCase();
  //   //     // var $viewWrapper = $("div.fc-view-" + viewName +" div.fc-agenda-body");
  //   //     // var currentHourLabel = $viewWrapper.find("table tbody tr th:contains('"+ "5" +"')");
  //   //     // $viewWrapper.scrollTo(currentHourLabel, 1);
  //   // }
  // },
  eventDrop: function(event, delta, allDay, revertFunc){
    FullcalendarEngine.Events.move(event, delta, allDay);
  },
  eventResize: function(event, delta, revertFunc){
    FullcalendarEngine.Events.resize(event, delta);
  },
  eventClick: function(event, jsEvent, view){
    // alert(jsEvent.which);
    if (event.category == "template")
    {
      var class_child_id = '.instance-' + event.child_id;
      $('.fc-scroller').scrollTo(class_child_id, 1, function() {
        $(class_child_id).effect( "highlight", {color:"white"}, 300 );
      });
    }
    if ((event.category != "template") && (event.id > -1))
    {
      FullcalendarEngine.displayEditScreen(event.id);
    }
  },
  // https://github.com/mherrmann/fullcalendar-rightclick
  // dayRightclick: function(date, jsEvent, view) {
  //     alert('a day has been rightclicked!');
  //     // Prevent browser context menu:
  //     return false;
  // },
  // eventRightclick: function(event, jsEvent, view) {
  //     alert('an event has been rightclicked!');
  //     // alert(jsEvent.which);
  //     $(jsEvent.currentTarget).contextMenu();
  //     // $('.context-class').contextMenu();
  //     //  FullcalendarEngine.Events.showEventDetails(event);
  //     // Prevent browser context menu:
  //     return false;
  // },
  select: function( startDate, endDate, jsEvent, view) { // This is newer version from fullcalendar_engine's

    switch (view.name) {
      case 'month':
        // Move the calendar to the date and put into week mode
        $('.calendar').fullCalendar( 'gotoDate', startDate );
        $(".calendar").fullCalendar( 'changeView', 'agendaWeek' );
        break;
      default:
        if (startDate.hasTime()) { // did not click within allday area (template)
          var start = new moment(startDate, "s"); 
          var end = new moment(endDate, "s");
          var slotInterval = new moment.duration(full_calendar_options.slotDuration); //, "HH:mm:ss");

          if (end.isSame(start.clone().add(slotInterval))) {
            slotInterval.add(slotInterval);
            end = start.add(slotInterval)
          }

          FullcalendarEngine.Form.display({
            starttime: new Date(startDate),
            endtime:   end,
            allDay:    startDate.hasTime()
          });
        } else {
          // do something like create a template? not really necessary as they should define a special first
        }
    };
  }
});

if (typeof(FullcalendarEngine) === 'undefined') { FullcalendarEngine = {}; }


FullcalendarEngine = {
  Form: {
    display: function(options) {
      // options = {}
      if (typeof(options) == 'undefined') { options = {} }
      FullcalendarEngine.Form.fetch(options)
    },
    render: function(options){

      $('#new_route').trigger('reset');
      var startTime = options['starttime'] || new Date(), endTime = options['endtime'] || new Date(startTime.getTime());
      // The above could create a date not in the calendar (like on a weekend, in certain cases !!! - just take out?)
      // if(startTime.getTime() == endTime.getTime()) { endTime.setMinutes(startTime.getMinutes() + 30); }
      $('#route_starts_at').val(startTime);
      $('#route_ends_at').val(endTime);
      $('#create_event_dialog').dialog({
        title: 'Create New Route',
        modal: true,
        width: 700,
        top: 220,
        height: $(window).height() - 220,
        close: function(event, ui) { $('#create_event_dialog').dialog('destroy') }
      });
    },
    fetch: function(options){
      $.ajax({
        type: 'get',
        dataType: 'script',
        async: true,
        cache: true, // Otherwise I get Unpermitted parameter: _ within - Processing by Admin::RoutesController#new as JS
        url: admin_routes_path + "/new",
        success: function(){ FullcalendarEngine.Form.render(options) },
      });
    },
    authenticity_token: function(){
      return($('meta[name="csrf-token"]').attr("content"))
    }
  },
  Events: {
    move: function(event, delta, allDay){
      var $spinner = $('.spinner');
      $.ajax({
        data: 'title=' + event.title + '&day_delta=' + event.start.format() + '&minute_delta=' + event.end.format() + '&all_day=' + allDay + '&authenticity_token=' + FullcalendarEngine.Form.authenticity_token(),
        dataType: 'json',
        type: 'post',
        url: FullcalendarEngine.app_path() + "/events/" + event.id + "/move",
        beforeSend: show_spinner,
        complete: hide_spinner,
        error: function(xhr){
          alert(JSON.parse(xhr.responseText)["message"])
        },
        success: function(data) {
          // alert(event.start.format());
          // Cookies.set('last_working_date', event.start.format());
          FullcalendarEngine.Events.refetch_resources_and_scroll_to_event();
          // $('.calendar').fullCalendar('updateEvent', event);
          // $('.calendar').fullCalendar( 'refetchResources' ) // Only available in paid version. like $500
        }
      });
      function show_spinner() {
        $spinner.show();
      }
      function hide_spinner() {
        $spinner.hide();
      }
    },
    refetch_resources_and_scroll_to_event: function(){
      $.ajax({
        data: '', //event_id=' + event.id, //+ '&day_delta=' + event.end.format() + '&minute_delta=' + delta.minutes + '&authenticity_token=' + FullcalendarEngine.Form.authenticity_token(),
        dataType: 'script',
        type: 'get',
        url: admin_routes_path + "/refresh_calendar",
        error: function(xhr){
          alert(JSON.parse(xhr.responseText)["message"])
        }
      });
    },

    resize: function(event, delta){
      $.ajax({
        data: 'title=' + event.title + '&day_delta=' + event.end.format() + '&minute_delta=' + delta.minutes + '&authenticity_token=' + FullcalendarEngine.Form.authenticity_token(),
        dataType: 'script',
        type: 'post',
        url: FullcalendarEngine.app_path() + "/events/" + event.id + "/resize",
        error: function(xhr){
          alert(JSON.parse(xhr.responseText)["message"])
        }
      });
    },
    edit: function(event_id){
      $.ajax({
        url: admin_routes_path + "/" + event_id + "/edit",
        success: function(data) {
        }
      });
    },
    delete: function(event_id, delete_all){
      var $spinner = $('.spinner');
      $.ajax({
        data: {"_method":"delete", "authenticity_token":FullcalendarEngine.Form.authenticity_token()},
        // data: {"authenticity_token":FullcalendarEngine.Form.authenticity_token()},
        dataType: 'script',
        type: 'DELETE', // Don't use this or it will work, but then make another call that fails for some reason..
        // http://stackoverflow.com/questions/14924091/rails-ajax-jquery-delete-submits-a-post-request-after
        // https://github.com/activeadmin/activeadmin/issues/4544 Might be causing DELETE route to not work !!!
        // type: 'post',
        // url: admin_routes_path + "/" + event_id,
        url: routes_path + "/" + event_id,
        // beforeSend: show_spinner,
        // complete: hide_spinner,
        error: function(xhr) {
          // alert("Delete Failed, for event_id = " + event_id + " Error is: " + xhr.responseText)
          if (xhr.status == "404") // Somehow this is working so, so not sure what's up.. Just assume it's OK, I know..
          // Seems fixed in latest ActiveAdmin pre5 !!!
          { // Won't need once the DELETE bug in ActiveAdmin gets fixed. see above link referenced within AA issues
            alert("xhr.status == '404'");
            // window.location.reload(true)
          } else
          {
            alert("Delete Failed, for event_id = " + event_id + " Error is: " + xhr.responseText)
          }
        },
         success: function(data) {
          window.location.reload(true)
          // $('.calendar').fullCalendar('updateEvent', event);
          // $('.calendar').fullCalendar( 'refetchResources' ) // Only available in paid version. like $500
        }
      });
      function show_spinner() {
        $spinner.show();
      }
      function hide_spinner() {
        $spinner.hide();
      }
    },
    make_template: function(event_id){
      $.ajax({
        data: 'authenticity_token=' + FullcalendarEngine.Form.authenticity_token() + '&event_id=' + event_id + "&dup_as=make_template",
        type: 'post',
        // dataType: 'script',
        url: admin_routes_path + "/duplicate/",
        // url: admin_routes_path + "/make_template/",
        success: window.location.reload(true)
      });
    },
    make_instance: function(event_id){
      $.ajax({
        data: 'authenticity_token=' + FullcalendarEngine.Form.authenticity_token() + '&event_id=' + event_id + "&dup_as=make_instance",
        type: 'post',
        url: admin_routes_path + "/duplicate/",
        success: window.location.reload(true)
      });
    },
    // Should not be sending something like this to "duplicate", maybe update? sending &dup_as=instance_revert for now ...
    revert_to_template: function(event_id){
      $.ajax({
        data: 'authenticity_token=' + FullcalendarEngine.Form.authenticity_token() + '&event_id=' + event_id + "&update_type=instance_revert",
        type: 'post',
        url: admin_routes_path + "/update_via_event/",
        success: window.location.reload(true)
      });
    },
    make_special: function(event_id){
      $.ajax({
        data: 'authenticity_token=' + FullcalendarEngine.Form.authenticity_token() + '&event_id=' + event_id + "&dup_as=make_special",
        type: 'post',
        url: admin_routes_path + "/duplicate/",
        success: function(data) {
          success: window.location.reload(true)
          // refetch_events_and_close_dialog();
        }
      });
    },
    refetch_events_and_close_dialog: function() {
      // $('.calendar').fullCalendar('refetchEvents');
      $('.dialog:visible').dialog('destroy');
      // Cookies.set('last_calendar_type', "agendaWeek");
      FullcalendarEngine.Events.refetch_resources_and_scroll_to_event();
    },
    showPeriodAndFrequency: function(value){
      switch (value) {
        case 'Daily':
          $('#period').html('day');
          $('#frequency').show();
          break;
        case 'Weekly':
          $('#period').html('week');
          $('#frequency').show();
          break;
        case 'Monthly':
          $('#period').html('month');
          $('#frequency').show();
          break;
        case 'Yearly':
          $('#period').html('year');
          $('#frequency').show();
          break;
        default:
          $('#frequency').hide();
      }
    }
  },
  setTime: function(type, time) {
    var $year = $(type + '_1i'), $month = $(type + '_2i'), $day = $(type + '_3i'), $hour = $(type + '_4i'), $minute = $(type + '_5i')
    $year.val(time.getFullYear());
    $month.prop('selectedIndex', time.getMonth());
    $day.prop('selectedIndex', time.getDate() - 1);
    $hour.prop('selectedIndex', time.getHours());
    $minute.prop('selectedIndex', time.getMinutes());
  },
  displayEditScreen: function(event_id) {
    $('#event_desc_dialog').dialog({
      title: "Edit Route",
      modal: true,
      width: 400,
      close: function(event, ui) {
        $('#event_desc_dialog').html('');
        $('#event_desc_dialog').dialog('destroy')
      },
      open: function( event, ui ) {
        FullcalendarEngine.Events.edit(event_id);
      }
    });
  },
  app_path: function(){
    return (app_path || window.location.pathname.match(/\/(\w)+/)[0])
  }
}
$(document).ready(function(){
  $.contextMenu({
      selector: '.context-class',
      position: function(opt, x, y){opt.$menu.position({my: "center top", at: "center bottom", of: this})},

      build: function($trigger, e) {
          // this callback is executed every time the menu is to be shown
          // its results are destroyed every time the menu is hidden
          // e is the original contextmenu event, containing e.pageX and e.pageY (amongst other data)
          // https://swisnl.github.io/jQuery-contextMenu/demo/dynamic-create.html

          return {
              callback: function(key, options) {
                var eventId = $trigger.data('event-id');
                if (key == "edit") {
                  FullcalendarEngine.displayEditScreen(eventId);
                } else {
                  // Don't need a window, just do it
                  FullcalendarEngine.Events[key](eventId);
                };
              },
              items: $(e.currentTarget).determineEventItems()
          };
      }
  });
});

jQuery.fn.extend({
  determineEventItems: function () {

  var category = $(this).data("routeCategory");
  var hasChildren = $(this).data("hasChildren");
  var eventItems = {}

  switch (category) {

    case 'template':
      if (hasChildren)
        eventItems = {
              // "edit": {name: "Edit", icon: "edit"}, // caused "undefined method `reject' for false:FalseClass"
              "delete": {name: "Delete", icon: "delete"},
              // "reset_instance_event": {name: "Overwrite Instance", icon: "paste"},
              // "sep1": "---------",
              // "quit": {name: "Quit", icon: "quit"}
        }
      else
        eventItems = {
            // "edit": {name: "Edit", icon: "edit"}, // caused "undefined method `reject' for false:FalseClass"
            "delete": {name: "Delete", icon: "delete"},
            "make_instance": {name: "Create Instance", icon: "copy"},
            // "sep1": "---------",
            // "quit": {name: "Quit", icon: "quit"}
        }
      break;

    case 'instance':
      // $event_actions.append($edit_event).append(" | ").append($delete_event).append(" | ").append($make_special_event)
      eventItems = {
          "edit": {name: "Edit", icon: "edit"},
          "delete": {name: "Delete", icon: "delete"},
          "make_special": {name: "Duplicate", icon: "copy"},
          // "sep1": "---------",
          // "quit": {name: "Quit", icon: "quit"}
      }
      break;

    case 'modified_instance':
      // $event_actions.append($edit_event).append(" | ").append($delete_event).append(" | ").append($revert_to_template_event).append(" | ").append($make_special_event)
      eventItems = {
          "edit": {name: "Edit", icon: "edit"},
          "delete": {name: "Delete", icon: "delete"},
          "revert_to_template": {name: "Revert", icon: "paste"},
          "make_special": {name: "Duplicate", icon: "copy"},
          // "sep1": "---------",
          // "quit": {name: "Quit", icon: "quit"}
      }
      break;

    case 'special':
      // $event_actions.append($edit_event).append(" | ").append($delete_event).append(" | ").append($make_template_event).append(" | ").append($make_special_event)
      eventItems = {
          "edit": {name: "Edit", icon: "edit"},
          "delete": {name: "Delete", icon: "delete"},
          "make_template": {name: "Create Template", icon: "copy"},
          "make_special": {name: "Duplicate", icon: "copy"},
          // "sep1": "---------",
          // "quit": {name: "Quit", icon: "quit"}
      }
      break;

    default:
  }
  return eventItems;
} });
